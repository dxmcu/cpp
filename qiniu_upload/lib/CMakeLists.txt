cmake_minimum_required(VERSION 3.0)

set(LIB_QINIU_NAME qiniu)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

add_library(${LIB_QINIU_NAME} SHARED qiniu/io.c)
target_sources(${LIB_QINIU_NAME} PRIVATE qiniu/auth_mac.c)
target_sources(${LIB_QINIU_NAME} PRIVATE qiniu/base.c)
target_sources(${LIB_QINIU_NAME} PRIVATE qiniu/base_io.c)
target_sources(${LIB_QINIU_NAME} PRIVATE qiniu/cdn.c)
target_sources(${LIB_QINIU_NAME} PRIVATE qiniu/conf.c)
target_sources(${LIB_QINIU_NAME} PRIVATE qiniu/fop.c)
target_sources(${LIB_QINIU_NAME} PRIVATE qiniu/http.c)
target_sources(${LIB_QINIU_NAME} PRIVATE qiniu/qetag.c)
target_sources(${LIB_QINIU_NAME} PRIVATE qiniu/reader.c)
target_sources(${LIB_QINIU_NAME} PRIVATE qiniu/resumable_io.c)
target_sources(${LIB_QINIU_NAME} PRIVATE qiniu/rs.c)
target_sources(${LIB_QINIU_NAME} PRIVATE qiniu/rsf.c)
target_sources(${LIB_QINIU_NAME} PRIVATE qiniu/tm.c)
target_sources(${LIB_QINIU_NAME} PRIVATE cJSON/cJSON.c)
target_sources(${LIB_QINIU_NAME} PRIVATE b64/b64.c)
target_sources(${LIB_QINIU_NAME} PRIVATE b64/urlsafe_b64.c)
target_link_libraries(${LIB_QINIU_NAME} crypto)
target_link_libraries(${LIB_QINIU_NAME} ssl)
target_link_libraries(${LIB_QINIU_NAME} curl)

